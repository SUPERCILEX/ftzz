pub mod ftzz
pub enum ftzz::Error
pub ftzz::Error::InvalidEnvironment
pub ftzz::Error::Io
pub ftzz::Error::RuntimeCreation
pub ftzz::Error::TaskJoin
impl core::error::Error for ftzz::Error
impl core::fmt::Debug for ftzz::Error
pub fn ftzz::Error::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for ftzz::Error
pub fn ftzz::Error::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for ftzz::Error
impl core::marker::Send for ftzz::Error
impl core::marker::Sync for ftzz::Error
impl core::marker::Unpin for ftzz::Error
impl core::panic::unwind_safe::RefUnwindSafe for ftzz::Error
impl core::panic::unwind_safe::UnwindSafe for ftzz::Error
impl<C> error_stack::context::Context for ftzz::Error where C: core::error::Error + core::marker::Send + core::marker::Sync + 'static
pub fn ftzz::Error::provide<'a>(&'a self, request: &mut core::error::Request<'a>)
impl<T, U> core::convert::Into<U> for ftzz::Error where U: core::convert::From<T>
pub fn ftzz::Error::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for ftzz::Error where U: core::convert::Into<T>
pub type ftzz::Error::Error = core::convert::Infallible
pub fn ftzz::Error::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for ftzz::Error where U: core::convert::TryFrom<T>
pub type ftzz::Error::Error = <U as core::convert::TryFrom<T>>::Error
pub fn ftzz::Error::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for ftzz::Error where T: core::fmt::Display + ?core::marker::Sized
pub fn ftzz::Error::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for ftzz::Error where T: 'static + ?core::marker::Sized
pub fn ftzz::Error::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for ftzz::Error where T: ?core::marker::Sized
pub fn ftzz::Error::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for ftzz::Error where T: ?core::marker::Sized
pub fn ftzz::Error::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for ftzz::Error
pub fn ftzz::Error::from(t: T) -> T
impl<T> thousands::traits::Separable for ftzz::Error where T: core::fmt::Display
pub fn ftzz::Error::separate_by_policy(&self, policy: thousands::policies::SeparatorPolicy<'_>) -> alloc::string::String
impl<T> tracing::instrument::Instrument for ftzz::Error
impl<T> tracing::instrument::WithSubscriber for ftzz::Error
pub enum ftzz::NumFilesWithRatioError
pub ftzz::NumFilesWithRatioError::InvalidRatio
pub ftzz::NumFilesWithRatioError::InvalidRatio::file_to_dir_ratio: core::num::nonzero::NonZeroU64
pub ftzz::NumFilesWithRatioError::InvalidRatio::num_files: core::num::nonzero::NonZeroU64
impl core::error::Error for ftzz::NumFilesWithRatioError
impl core::fmt::Debug for ftzz::NumFilesWithRatioError
pub fn ftzz::NumFilesWithRatioError::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::fmt::Display for ftzz::NumFilesWithRatioError
pub fn ftzz::NumFilesWithRatioError::fmt(&self, __formatter: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::marker::Freeze for ftzz::NumFilesWithRatioError
impl core::marker::Send for ftzz::NumFilesWithRatioError
impl core::marker::Sync for ftzz::NumFilesWithRatioError
impl core::marker::Unpin for ftzz::NumFilesWithRatioError
impl core::panic::unwind_safe::RefUnwindSafe for ftzz::NumFilesWithRatioError
impl core::panic::unwind_safe::UnwindSafe for ftzz::NumFilesWithRatioError
impl<C> error_stack::context::Context for ftzz::NumFilesWithRatioError where C: core::error::Error + core::marker::Send + core::marker::Sync + 'static
pub fn ftzz::NumFilesWithRatioError::provide<'a>(&'a self, request: &mut core::error::Request<'a>)
impl<T, U> core::convert::Into<U> for ftzz::NumFilesWithRatioError where U: core::convert::From<T>
pub fn ftzz::NumFilesWithRatioError::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for ftzz::NumFilesWithRatioError where U: core::convert::Into<T>
pub type ftzz::NumFilesWithRatioError::Error = core::convert::Infallible
pub fn ftzz::NumFilesWithRatioError::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for ftzz::NumFilesWithRatioError where U: core::convert::TryFrom<T>
pub type ftzz::NumFilesWithRatioError::Error = <U as core::convert::TryFrom<T>>::Error
pub fn ftzz::NumFilesWithRatioError::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::string::ToString for ftzz::NumFilesWithRatioError where T: core::fmt::Display + ?core::marker::Sized
pub fn ftzz::NumFilesWithRatioError::to_string(&self) -> alloc::string::String
impl<T> core::any::Any for ftzz::NumFilesWithRatioError where T: 'static + ?core::marker::Sized
pub fn ftzz::NumFilesWithRatioError::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for ftzz::NumFilesWithRatioError where T: ?core::marker::Sized
pub fn ftzz::NumFilesWithRatioError::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for ftzz::NumFilesWithRatioError where T: ?core::marker::Sized
pub fn ftzz::NumFilesWithRatioError::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for ftzz::NumFilesWithRatioError
pub fn ftzz::NumFilesWithRatioError::from(t: T) -> T
impl<T> thousands::traits::Separable for ftzz::NumFilesWithRatioError where T: core::fmt::Display
pub fn ftzz::NumFilesWithRatioError::separate_by_policy(&self, policy: thousands::policies::SeparatorPolicy<'_>) -> alloc::string::String
impl<T> tracing::instrument::Instrument for ftzz::NumFilesWithRatioError
impl<T> tracing::instrument::WithSubscriber for ftzz::NumFilesWithRatioError
pub struct ftzz::Generator
impl ftzz::Generator
pub fn ftzz::Generator::generate(self, output: &mut impl core::fmt::Write) -> error_stack::result::Result<(), ftzz::Error>
impl core::fmt::Debug for ftzz::Generator
pub fn ftzz::Generator::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl ftzz::Generator
pub fn ftzz::Generator::builder() -> ftzz::GeneratorBuilder
impl core::marker::Freeze for ftzz::Generator
impl core::marker::Send for ftzz::Generator
impl core::marker::Sync for ftzz::Generator
impl core::marker::Unpin for ftzz::Generator
impl core::panic::unwind_safe::RefUnwindSafe for ftzz::Generator
impl core::panic::unwind_safe::UnwindSafe for ftzz::Generator
impl<T, U> core::convert::Into<U> for ftzz::Generator where U: core::convert::From<T>
pub fn ftzz::Generator::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for ftzz::Generator where U: core::convert::Into<T>
pub type ftzz::Generator::Error = core::convert::Infallible
pub fn ftzz::Generator::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for ftzz::Generator where U: core::convert::TryFrom<T>
pub type ftzz::Generator::Error = <U as core::convert::TryFrom<T>>::Error
pub fn ftzz::Generator::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for ftzz::Generator where T: 'static + ?core::marker::Sized
pub fn ftzz::Generator::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for ftzz::Generator where T: ?core::marker::Sized
pub fn ftzz::Generator::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for ftzz::Generator where T: ?core::marker::Sized
pub fn ftzz::Generator::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for ftzz::Generator
pub fn ftzz::Generator::from(t: T) -> T
impl<T> tracing::instrument::Instrument for ftzz::Generator
impl<T> tracing::instrument::WithSubscriber for ftzz::Generator
pub struct ftzz::GeneratorBuilder<S: ftzz::generator::generator_builder::State>
impl<S: ftzz::generator::generator_builder::State> ftzz::GeneratorBuilder<S>
pub fn ftzz::GeneratorBuilder<S>::build(self) -> ftzz::Generator where S: ftzz::generator::generator_builder::IsComplete
pub fn ftzz::GeneratorBuilder<S>::bytes_exact(self, value: bool) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetBytesExact<S>> where <S as ftzz::generator::generator_builder::State>::BytesExact: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::files_exact(self, value: bool) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetFilesExact<S>> where <S as ftzz::generator::generator_builder::State>::FilesExact: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::fill_byte(self, value: u8) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetFillByte<S>> where <S as ftzz::generator::generator_builder::State>::FillByte: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::max_depth(self, value: u32) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetMaxDepth<S>> where <S as ftzz::generator::generator_builder::State>::MaxDepth: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::maybe_bytes_exact(self, value: core::option::Option<bool>) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetBytesExact<S>> where <S as ftzz::generator::generator_builder::State>::BytesExact: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::maybe_files_exact(self, value: core::option::Option<bool>) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetFilesExact<S>> where <S as ftzz::generator::generator_builder::State>::FilesExact: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::maybe_fill_byte(self, value: core::option::Option<u8>) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetFillByte<S>> where <S as ftzz::generator::generator_builder::State>::FillByte: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::maybe_max_depth(self, value: core::option::Option<u32>) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetMaxDepth<S>> where <S as ftzz::generator::generator_builder::State>::MaxDepth: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::maybe_num_bytes(self, value: core::option::Option<u64>) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetNumBytes<S>> where <S as ftzz::generator::generator_builder::State>::NumBytes: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::maybe_seed(self, value: core::option::Option<u64>) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetSeed<S>> where <S as ftzz::generator::generator_builder::State>::Seed: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::num_bytes(self, value: u64) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetNumBytes<S>> where <S as ftzz::generator::generator_builder::State>::NumBytes: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::num_files_with_ratio(self, value: ftzz::NumFilesWithRatio) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetNumFilesWithRatio<S>> where <S as ftzz::generator::generator_builder::State>::NumFilesWithRatio: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::root_dir(self, value: impl core::convert::Into<std::path::PathBuf>) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetRootDir<S>> where <S as ftzz::generator::generator_builder::State>::RootDir: bon::builder_state::IsUnset
pub fn ftzz::GeneratorBuilder<S>::seed(self, value: u64) -> ftzz::GeneratorBuilder<ftzz::generator::generator_builder::SetSeed<S>> where <S as ftzz::generator::generator_builder::State>::Seed: bon::builder_state::IsUnset
impl<S> core::marker::Freeze for ftzz::GeneratorBuilder<S>
impl<S> core::marker::Send for ftzz::GeneratorBuilder<S>
impl<S> core::marker::Sync for ftzz::GeneratorBuilder<S>
impl<S> core::marker::Unpin for ftzz::GeneratorBuilder<S>
impl<S> core::panic::unwind_safe::RefUnwindSafe for ftzz::GeneratorBuilder<S>
impl<S> core::panic::unwind_safe::UnwindSafe for ftzz::GeneratorBuilder<S>
impl<T, U> core::convert::Into<U> for ftzz::GeneratorBuilder<S> where U: core::convert::From<T>
pub fn ftzz::GeneratorBuilder<S>::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for ftzz::GeneratorBuilder<S> where U: core::convert::Into<T>
pub type ftzz::GeneratorBuilder<S>::Error = core::convert::Infallible
pub fn ftzz::GeneratorBuilder<S>::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for ftzz::GeneratorBuilder<S> where U: core::convert::TryFrom<T>
pub type ftzz::GeneratorBuilder<S>::Error = <U as core::convert::TryFrom<T>>::Error
pub fn ftzz::GeneratorBuilder<S>::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> core::any::Any for ftzz::GeneratorBuilder<S> where T: 'static + ?core::marker::Sized
pub fn ftzz::GeneratorBuilder<S>::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for ftzz::GeneratorBuilder<S> where T: ?core::marker::Sized
pub fn ftzz::GeneratorBuilder<S>::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for ftzz::GeneratorBuilder<S> where T: ?core::marker::Sized
pub fn ftzz::GeneratorBuilder<S>::borrow_mut(&mut self) -> &mut T
impl<T> core::convert::From<T> for ftzz::GeneratorBuilder<S>
pub fn ftzz::GeneratorBuilder<S>::from(t: T) -> T
impl<T> tracing::instrument::Instrument for ftzz::GeneratorBuilder<S>
impl<T> tracing::instrument::WithSubscriber for ftzz::GeneratorBuilder<S>
pub struct ftzz::NumFilesWithRatio
impl ftzz::NumFilesWithRatio
pub fn ftzz::NumFilesWithRatio::from_num_files(num_files: core::num::nonzero::NonZeroU64) -> Self
pub fn ftzz::NumFilesWithRatio::new(num_files: core::num::nonzero::NonZeroU64, file_to_dir_ratio: core::num::nonzero::NonZeroU64) -> core::result::Result<Self, ftzz::NumFilesWithRatioError>
impl core::clone::Clone for ftzz::NumFilesWithRatio
pub fn ftzz::NumFilesWithRatio::clone(&self) -> ftzz::NumFilesWithRatio
impl core::cmp::Eq for ftzz::NumFilesWithRatio
impl core::cmp::PartialEq for ftzz::NumFilesWithRatio
pub fn ftzz::NumFilesWithRatio::eq(&self, other: &ftzz::NumFilesWithRatio) -> bool
impl core::fmt::Debug for ftzz::NumFilesWithRatio
pub fn ftzz::NumFilesWithRatio::fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result
impl core::hash::Hash for ftzz::NumFilesWithRatio
pub fn ftzz::NumFilesWithRatio::hash<__H: core::hash::Hasher>(&self, state: &mut __H)
impl core::marker::Copy for ftzz::NumFilesWithRatio
impl core::marker::StructuralPartialEq for ftzz::NumFilesWithRatio
impl core::marker::Freeze for ftzz::NumFilesWithRatio
impl core::marker::Send for ftzz::NumFilesWithRatio
impl core::marker::Sync for ftzz::NumFilesWithRatio
impl core::marker::Unpin for ftzz::NumFilesWithRatio
impl core::panic::unwind_safe::RefUnwindSafe for ftzz::NumFilesWithRatio
impl core::panic::unwind_safe::UnwindSafe for ftzz::NumFilesWithRatio
impl<T, U> core::convert::Into<U> for ftzz::NumFilesWithRatio where U: core::convert::From<T>
pub fn ftzz::NumFilesWithRatio::into(self) -> U
impl<T, U> core::convert::TryFrom<U> for ftzz::NumFilesWithRatio where U: core::convert::Into<T>
pub type ftzz::NumFilesWithRatio::Error = core::convert::Infallible
pub fn ftzz::NumFilesWithRatio::try_from(value: U) -> core::result::Result<T, <T as core::convert::TryFrom<U>>::Error>
impl<T, U> core::convert::TryInto<U> for ftzz::NumFilesWithRatio where U: core::convert::TryFrom<T>
pub type ftzz::NumFilesWithRatio::Error = <U as core::convert::TryFrom<T>>::Error
pub fn ftzz::NumFilesWithRatio::try_into(self) -> core::result::Result<U, <U as core::convert::TryFrom<T>>::Error>
impl<T> alloc::borrow::ToOwned for ftzz::NumFilesWithRatio where T: core::clone::Clone
pub type ftzz::NumFilesWithRatio::Owned = T
pub fn ftzz::NumFilesWithRatio::clone_into(&self, target: &mut T)
pub fn ftzz::NumFilesWithRatio::to_owned(&self) -> T
impl<T> core::any::Any for ftzz::NumFilesWithRatio where T: 'static + ?core::marker::Sized
pub fn ftzz::NumFilesWithRatio::type_id(&self) -> core::any::TypeId
impl<T> core::borrow::Borrow<T> for ftzz::NumFilesWithRatio where T: ?core::marker::Sized
pub fn ftzz::NumFilesWithRatio::borrow(&self) -> &T
impl<T> core::borrow::BorrowMut<T> for ftzz::NumFilesWithRatio where T: ?core::marker::Sized
pub fn ftzz::NumFilesWithRatio::borrow_mut(&mut self) -> &mut T
impl<T> core::clone::CloneToUninit for ftzz::NumFilesWithRatio where T: core::clone::Clone
pub unsafe fn ftzz::NumFilesWithRatio::clone_to_uninit(&self, dest: *mut u8)
impl<T> core::convert::From<T> for ftzz::NumFilesWithRatio
pub fn ftzz::NumFilesWithRatio::from(t: T) -> T
impl<T> tracing::instrument::Instrument for ftzz::NumFilesWithRatio
impl<T> tracing::instrument::WithSubscriber for ftzz::NumFilesWithRatio
